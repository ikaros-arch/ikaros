// store.js
import { create } from 'zustand';
export const useStore = create(set => ({
// Modules to include
  modules: JSON.parse(import.meta.env.VITE_MODULES),
  setModules: (array) => set({ modules: array }),
// environmental variables
  env: {
    domainName: import.meta.env.VITE_DOMAIN || "historyofincarceration.com",
    apiEndpoint: import.meta.env.VITE_DB_API,
    geonamesApiKey: import.meta.env.VITE_GEONAMES_API,
    isOnline: import.meta.env.VITE_ONLINE,
    appTitle: import.meta.env.VITE_TITLE,
    kcUrl: import.meta.env.VITE_KC_URL,
    kcRealm: import.meta.env.VITE_KC_REALM,
    kcClient: import.meta.env.VITE_KC_CLIENT,
    modules: JSON.parse(import.meta.env.VITE_MODULES)
  },
  setEnv: (envvar) => set({ env: envvar }), 
// CRUD button action trigger 
  buttonAction: {
    "new": false,
    "save": false,
    "revert": false,
    "delete": false 
  },
  setButtonAction: (action) => set({ buttonAction: action }),
// Selected row in main window table tab
  selectedRowUUID: null,
  setSelectedRowUUID: (uuid) => set({ selectedRowUUID: uuid }),
// Keep the filtered rows for the main table
  filteredRows: [],
  setFilteredRows: (data) => set({ filteredRows: data }),
// Keep the selected row for the main table
  selRow: null,
  setSelRow: (data) => set({ selRow: data }),
// TableDrawer open options  
  tableOpen: false,
  setTableOpen: (bool) => set({ tableOpen: bool }),
// Get logged in actor info
  activeActor: null,
  setActiveActor: (data) => set({ activeActor: data }),
// States for static lookup data
  popData: false,
  setPopData: (bool) => set({ popData: bool }),
// Static states defined here
  lines: [
      { label: '1', value:1},
      { label: '2', value: 2},
      { label: '3', value: 3},
      { label: '4', value: 4},
      { label: '5', value: 5}
    ],
  setLines: (data) => set({ lines: data }),
  // State of the Snackbar 
  snackbarOpen: false,
  setSnackbarOpen: (isOpen) => set({ snackbarOpen: isOpen }),
  snackbarData: {
    "actionType": "",
    "messageType": "",
    "messageText": "" 
  },
  setSnackbarData: (data) => set({ snackbarData: data }),

  //Module specific store (to be separated into a different stores)
  userRole: null,
  setUserRole: (data) => set({ userRole: data }),
  userSettings: {},
  setUserSettings: (data) => set({ userSettings: data }),
  currUuid: null,
  setCurrUuid: (data) => set({ currUuid: data }),
  currEntryId: null,
  setCurrEntryId: (data) => set({ currEntryId: data }),
  termTypes: [],
  setTermTypes: (data) => set({ termTypes: data }),
  terms: {},
  setTerms: (data) => set({ terms: data }),
  recordLookup: [],
  setRecordLookup: (data) => set({ recordLookup: data }),
  mediaTypes: [],
  setMediaTypes: (data) => set({ mediaTypes: data }), 
  vocabType: 'term',
  setVocabType: (data) => set({ vocabType: data }),
  places: {},
  setPlaces: (data) => set({ places: data }),
  actors: [],
  setActors: (data) => set({ actors: data }),
  currActor: null,
  setCurrActor: (data) => set({ currActor: data }),
  currPlace: null,
  setCurrPlace: (data) => set({ currPlace: data }),
  currTerm: null,
  setCurrTerm: (data) => set({ currTerm: data }),
  currMedia: null,
  setCurrMedia: (data) => set({ currMedia: data }),
  currAudit: null,
  setCurrAudit: (data) => set({ currAudit: data }),
// MIMA  
  currDoc: null,
  setCurrDoc: (data) => set({ currDoc: data }),
  currLit: null,
  setCurrLit: (data) => set({ currLit: data }),
  currArch: null,
  setCurrArch: (data) => set({ currArch: data }),
  currViz: null,
  setCurrViz: (data) => set({ currViz: data }),
// Excavation
  phases: [],
  setPhases: (data) => set({ phases: data }),
  relations: [],
  setRelations: (data) => set({ relations: data }),
  contexts: [],
  setContexts: (data) => set({ contexts: data }),
  areas: [],  
  setAreas: (data) => set({ areas: data }),
  trenches: [],  
  setTrenches: (data) => set({ trenches: data }),
  projects: [],
  setProjects: (data) => set({ projects: data }),
  currContext: null,
  setCurrContext: (data) => set({ currContext: data }),
  currASU: null,
  setCurrASU: (data) => set({ currASU: data }),  
  currTrench: null,
  setCurrTrench: (data) => set({ currTrench: data }),
  currBag: null,
  setCurrBag: (data) => set({ currBag: data }),
  currFind: null,
  setCurrFind: (data) => set({ currFind: data }),
  currSample: null,
  setCurrSample: (data) => set({ currSample: data }),
  currTopo: null,
  setCurrTopo: (data) => set({ currTopo: data }),  
// Survey
  tract: [],
  setTract: (data) => set({ tract: data }),
  area: [],
  setArea: (data) => set({ area: data }),
  scape: [],
  setScape: (data) => set({ scape: data }),
  sample: [],
  setSample: (data) => set({ sample: data }),
  grid: [],
  setGrid: (data) => set({ grid: data }),
  feat: [],
  setFeat: (data) => set({ feat: data }),
  line: [],
  setLine: (data) => set({ line: data }),
  walker: [],
  setWalker: (data) => set({ walker: data }),
  collType: [],
  setCollType: (data) => set({ collType: data }),
  funcArt: [],
  setFuncArt: (data) => set({ funcArt: data }),
  infrMod: [],
  setInfrMod: (data) => set({ infrMod: data }),
  landuse: [],
  setLanduse: (data) => set({ landuse: data }),
  matArt: [],
  setMatArt: (data) => set({ matArt: data }),
  natFeat: [],
  setNatFeat: (data) => set({ natFeat: data }),
  recTypeField: [],
  setRecTypeField: (data) => set({ recTypeField: data }),
  recTypeLab: [],
  setRecTypeLab: (data) => set({ recTypeLab: data }),
  terrain: [],
  setTerrain: (data) => set({ terrain: data }),
  veg: [],
  setVeg: (data) => set({ veg: data }),
  period: [],
  setPeriod: (data) => set({ period: data }),
  scapeType: [],
  setScapeType: (data) => set({ scapeType: data }),
  featureType: [],
  setFeatureType: (data) => set({ featureType: data }),
  natResource: [],
  setNatResource: (data) => set({ natResource: data }),
  depositGeom: [],
  setDepositGeom: (data) => set({ depositGeom: data }),
  quarryLayout: [],
  setQuarryLayout: (data) => set({ quarryLayout: data }),
// Survey: Loaded records
  currTract: null,
  setCurrTract: (data) => set({ currTract: data }),
  currLine: null,
  setCurrLine: (data) => set({ currLine: data }),
  currSegments: [],
  setCurrSegments: (data) => set({ currSegments: data }),
  currScape: null,
  setCurrScape: (data) => set({ currScape: data }),
  currFeat: null,
  setCurrFeat: (data) => set({ currFeat: data }),
  currGrid: null,
  setCurrGrid: (data) => set({ currGrid: data }),
  currPhoto: null,
  setCurrPhoto: (data) => set({ currPhoto: data }),

}));