#!/bin/bash
set -e
export PGPASSWORD=$POSTGRES_PASSWORD;
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
--Create database for Keycloak authentication and user management
  CREATE DATABASE keycloak;
--Create the database for general data, add the postgis extension and make the api schema for use by postgrest
  CREATE DATABASE data;
  \connect data;
  BEGIN;
    CREATE EXTENSION postgis;
    CREATE SCHEMA IF NOT EXISTS $API_SCHEMA;
--Create an anonymous user with read access to the API-schema tables and views
    CREATE ROLE $ANONYMOUS_ROLE NOLOGIN;
    GRANT USAGE ON SCHEMA $API_SCHEMA TO $ANONYMOUS_ROLE;
--    GRANT SELECT ON ALL TABLES IN SCHEMA $API_SCHEMA TO $ANONYMOUS_ROLE;
--Create roles for PostgREST authentication
-- ADMIN ROLE
    CREATE ROLE admin NOLOGIN;
    GRANT USAGE ON SCHEMA $API_SCHEMA TO admin;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA $API_SCHEMA TO admin;
    GRANT USAGE ON ALL SEQUENCES IN SCHEMA $API_SCHEMA TO admin;
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA $API_SCHEMA TO admin;    
    GRANT CREATE ON SCHEMA $API_SCHEMA TO admin;

    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT ALL PRIVILEGES ON TABLES TO admin;
    
    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT USAGE ON SEQUENCES TO admin;
    
    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT EXECUTE ON FUNCTIONS TO admin;    

-- READ_WRITE ROLE
    CREATE ROLE read_write NOLOGIN;
    GRANT USAGE ON SCHEMA $API_SCHEMA TO read_write;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA $API_SCHEMA TO read_write;
    GRANT USAGE ON ALL SEQUENCES IN SCHEMA $API_SCHEMA TO read_write;
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA $API_SCHEMA TO read_write;

    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO read_write;
    
    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT USAGE ON SEQUENCES TO read_write; 
    
    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT EXECUTE ON FUNCTIONS TO read_write;

-- READ_ONLY ROLE
    CREATE ROLE read_only NOLOGIN;
    
    GRANT USAGE ON SCHEMA $API_SCHEMA TO read_only;
    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT SELECT ON TABLES TO read_only;
    
    ALTER DEFAULT PRIVILEGES IN SCHEMA $API_SCHEMA
    GRANT USAGE ON SEQUENCES TO read_only;     
    GRANT SELECT ON ALL TABLES IN SCHEMA $API_SCHEMA TO read_only; 

--Create the authenticator user for PostgREST
    CREATE ROLE $AUTHENTICATOR_ROLE LOGIN PASSWORD '$AUTHENTICATOR_PASSWORD' NOINHERIT NOCREATEDB NOCREATEROLE NOSUPERUSER;
    GRANT USAGE ON SCHEMA $API_SCHEMA TO $AUTHENTICATOR_ROLE;
    GRANT admin, read_write, read_only, $ANONYMOUS_ROLE TO $AUTHENTICATOR_ROLE;  
  COMMIT;

EOSQL

